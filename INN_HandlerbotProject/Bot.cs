using System;
using System.Collections.Generic;
using System.Configuration;
using Dadata;
using Dadata.Model;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace INN_HandlerbotProject
{
    class Bot
    {
        private Dictionary<long, Stack<string>> lastMessages = new Dictionary<long, Stack<string>>();
        private TelegramBotClient botClient;
        private bool fromLast;
        public void Run()
        {           

            botClient = new TelegramBotClient(ConfigurationManager.AppSettings.Get("token"));
            botClient.OnMessage += BotOnMessageReceived;

            botClient.StartReceiving();
            Console.WriteLine("Press any key to stop receiving messages...");
            Console.ReadKey();
            botClient.StopReceiving();
        }

        private async void BotOnMessageReceived(object sender, MessageEventArgs messageEventArgs)
        {
            var message = messageEventArgs.Message;

            if (message == null || message.Type != MessageType.Text)
                return;

            
            if (message.Text.ToLower().StartsWith("/inn"))
            {
                var innCommand = message.Text.Replace("/inn", "").Trim();
                var inns = innCommand.Split(' ');
                foreach (var inn in inns)
                {
                    
                    var data = InitilizeData(inn);

                    if (data.suggestions.Count == 0)
                        {
                            SendWrongInnMessage(messageEventArgs, inn);
                            continue;
                        }
                    foreach (var item in data.suggestions)
                    {
                        await botClient.SendTextMessageAsync(
                          chatId: message.Chat.Id,
                          text: $"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ò–ù–ù {inn}:\n" +
                                $"üè¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {item.value}\n" +
                                $"üìç –ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏: {item.data.address.value}"
                        );
                    }
                        
                }
            }
            else if (message.Text.ToLower().StartsWith("/full"))
            {
                var innCommand = message.Text.Replace("/full", "").Trim();
                var data = InitilizeData(innCommand);
                if (data.suggestions.Count > 0)
                {
                    foreach (var item in data.suggestions)
                    {
                        await botClient.SendTextMessageAsync(
                          chatId: message.Chat.Id,
                          text: $"üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ò–ù–ù {innCommand}:\n" +
                                $"üè¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {item.value}\n" +
                                $"üÜî –û–ì–†–ù: {item.data.ogrn}\n" +
                                $"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –û–ì–†–ù: {item.data.ogrn_date}\n" +
                                $"üìç –ê–¥—Ä–µ—Å: {item.data.address.unrestricted_value}\n" +
                                $"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {item.data.management.name}\n" +
                                $"üìä –°—Ç–∞—Ç—É—Å: {ComputedPartyState(item.data.state.status)}\n" +
                                $"üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {item.data.branch_count}"
                        );
                    }
                }
                else
                {
                    SendWrongInnMessage(messageEventArgs, innCommand);
                }
            }
            else if (message.Text.ToLower().StartsWith("/help"))
            {
                var helpMessage = "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º:\n\n" +
                                  "/start ‚Äì –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.\n" +
                                  "/help ‚Äì –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.\n" +
                                  "/hello ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≤—Ç–æ—Ä–µ.\n" +
                                  "/inn [–ò–ù–ù1 –ò–ù–ù2 ...] ‚Äì –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –ò–ù–ù. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ù–ù –∑–∞ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É.\n" +
                                  "/last ‚Äì –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç–∞.\n" +
                                  "/full [–ò–ù–ù] ‚Äì –ø–æ –ò–ù–ù –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏";

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: helpMessage
                );
            }
            else if (message.Text.StartsWith("/hello"))
            {
                var helloMessage = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–º–∏—Ä –ê–±–¥—É—Ä–∞—Ö–∏–º–æ–≤. –í–æ—Ç –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" +
                                   "‚úâÔ∏è Email: tiam11@bk.ru\n" +
                                   "üîó GitHub: [https://github.com/mr-abdurakhimov](https://github.com/mr-abdurakhimov)";

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: helloMessage,
                    parseMode: ParseMode.Markdown
                );
            }
            else if (message.Text.ToLower().StartsWith("/last"))
            {
                if (CheckLastCommand(message.From.Id))
                {
                    messageEventArgs.Message.Text = lastMessages[message.From.Id].Pop();
                    fromLast = true;
                    BotOnMessageReceived(sender, messageEventArgs);
                    return;
                }
                else
                    await botClient.SendTextMessageAsync(chatId: message.Chat.Id, text: $"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã /last —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞");
  
            }
            else if (message.Text.ToLower().StartsWith("/start"))
            {
                lastMessages[message.From.Id] = new Stack<string>();
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.From.FirstName}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏!");
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã( –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ '/help'"
                );
            }
            if(message.Text.StartsWith('/') && !fromLast)
            {
                if(lastMessages.ContainsKey(message.From.Id))
                {
                    lastMessages[message.From.Id].Push(message.Text);
                }
                else {
                    await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start"
                );
                }
            }
            fromLast = false;
                
        }

        private async void SendWrongInnMessage(MessageEventArgs message,string inn)
        {
            await botClient.SendTextMessageAsync(
                              chatId: message.Message.Chat.Id,
                              text: $"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–Ω: {inn}"
                            );
        }
        private bool CheckLastCommand(long chat_id)
        {
            if (lastMessages.ContainsKey(chat_id))
                return lastMessages[chat_id].Count > 0;
            return false;
        }

        private SuggestResponse<Party> InitilizeData(string INN)
        {
            var api = new SuggestClient(ConfigurationManager.AppSettings.Get("data_api"));

            var response = api.FindParty(INN);

            return response;
        }

        private string ComputedPartyState(PartyStatus status)
        {
            switch (status)
            {
                case PartyStatus.ACTIVE:
                    return "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è";
                case PartyStatus.LIQUIDATING:
                    return "–ª–∏–∫–≤–∏–¥–∏—Ä—É–µ—Ç—Å—è";
                case PartyStatus.LIQUIDATED:
                    return "–ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞";
                default:
                    return string.Empty;
            }
        }
    }
}
